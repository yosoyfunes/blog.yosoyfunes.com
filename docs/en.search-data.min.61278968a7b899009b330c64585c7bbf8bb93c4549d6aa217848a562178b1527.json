[{"id":0,"href":"/docs/localstack/instalacion/","title":"Instalaci√≥n","section":"LocalStack","content":" C√≥mo instalar LocalStack # LocalStack es un proyecto OpenSource que nos permite tener localmente los mismos servicios que podemos utilizar en la nube de AWS. Es perfecto para desarrollo y testing sin incurrir en costos de AWS.\nüìã Requisitos previos # Docker instalado en tu sistema Python 3.7+ (para instalaci√≥n local) AWS CLI configurado üöÄ M√©todos de instalaci√≥n # M√©todo 1: Instalaci√≥n local con pip # pip install localstack M√©todo 2: Usando Docker Compose (Recomendado) # Crea un archivo docker-compose.yaml:\nversion: \u0026#34;3.8\u0026#34; services: localstack: container_name: \u0026#34;${LOCALSTACK_DOCKER_NAME-localstack_main}\u0026#34; image: localstack/localstack network_mode: bridge ports: - \u0026#34;127.0.0.1:53:53\u0026#34; # only required for Pro (DNS) - \u0026#34;127.0.0.1:53:53/udp\u0026#34; # only required for Pro (DNS) - \u0026#34;127.0.0.1:443:443\u0026#34; # only required for Pro (LocalStack HTTPS Edge Proxy) - \u0026#34;127.0.0.1:4510-4559:4510-4559\u0026#34; # external service port range - \u0026#34;127.0.0.1:4566:4566\u0026#34; # LocalStack Edge Proxy environment: - DEBUG=${DEBUG-} - DATA_DIR=${DATA_DIR-} - LAMBDA_EXECUTOR=${LAMBDA_EXECUTOR-} - HOST_TMP_FOLDER=${TMPDIR:-/tmp/}localstack - DOCKER_HOST=unix:///var/run/docker.sock volumes: - \u0026#34;${TMPDIR:-/tmp}/localstack:/tmp/localstack\u0026#34; - \u0026#34;/var/run/docker.sock:/var/run/docker.sock\u0026#34; ‚ñ∂Ô∏è Iniciar LocalStack # Por consola (instalaci√≥n local) # localstack start -d Con Docker Compose # docker-compose up -d Con Docker run # docker run --rm -it -p 4566:4566 -p 4510-4559:4510-4559 localstack/localstack ‚úÖ Verificar la instalaci√≥n # Una vez que LocalStack est√© ejecut√°ndose, puedes verificar que funciona correctamente:\n# Verificar el estado de LocalStack curl http://localhost:4566/health # Listar servicios disponibles aws --endpoint-url=http://localhost:4566 s3 ls üîó Enlaces √∫tiles # Documentaci√≥n oficial de LocalStack Repositorio en GitHub ¬°Ahora tienes LocalStack funcionando localmente y puedes empezar a desarrollar con servicios AWS sin costo!\n"},{"id":1,"href":"/docs/localstack/","title":"LocalStack","section":"Documentaci√≥n","content":" LocalStack: Gu√≠a completa para desarrollo local con AWS # LocalStack es una herramienta esencial para cualquier desarrollador que trabaje con servicios de AWS. Te permite ejecutar servicios AWS localmente, ahorrando costos y acelerando el desarrollo.\nüéØ ¬øQu√© es LocalStack? # LocalStack es un proyecto OpenSource que simula los servicios de AWS en tu m√°quina local. Es perfecto para:\nDesarrollo local sin costos de AWS Testing de infraestructura como c√≥digo Prototipado r√°pido de arquitecturas CI/CD con pruebas automatizadas üìö Serie de posts sobre LocalStack # Esta gu√≠a completa te llevar√° desde la instalaci√≥n hasta casos de uso avanzados:\n1. Instalaci√≥n # Instalaci√≥n con pip y Docker Configuraci√≥n con Docker Compose Verificaci√≥n de la instalaci√≥n Enlaces a documentaci√≥n oficial 2. Configuraci√≥n de Perfiles # Configuraci√≥n de perfiles AWS Alternancia entre entornos local y AWS Scripts y alias √∫tiles Mejores pr√°cticas de seguridad 3. Terraform con LocalStack # Configuraci√≥n del provider AWS Ejemplos pr√°cticos con S3 y DynamoDB Backend remoto con LocalStack Verificaci√≥n de recursos creados 4. CloudFormation con LocalStack # Templates b√°sicos y avanzados Gesti√≥n de stacks localmente Comandos √∫tiles de CloudFormation Validaci√≥n de templates 5. Ejemplos Pr√°cticos # Configuraciones con Docker Scripts de automatizaci√≥n Testing con pytest Integraci√≥n con CI/CD üöÄ Servicios AWS soportados # LocalStack soporta una amplia gama de servicios AWS:\nServicios b√°sicos (Community Edition) # S3 - Simple Storage Service DynamoDB - Base de datos NoSQL Lambda - Funciones serverless API Gateway - APIs REST y WebSocket CloudFormation - Infrastructure as Code IAM - Identity and Access Management SQS - Simple Queue Service SNS - Simple Notification Service Servicios avanzados (Pro Edition) # ECS/EKS - Container services RDS - Relational Database Service ElastiCache - In-memory caching Kinesis - Real-time data streaming CloudWatch - Monitoring y logging üìä Comparaci√≥n: LocalStack vs AWS Real # Aspecto LocalStack AWS Real Costo Gratuito Pago por uso Velocidad Muy r√°pida Depende de la regi√≥n Disponibilidad Offline Requiere internet Servicios Subconjunto Todos los servicios Datos Temporales Persistentes Escalabilidad Limitada Ilimitada üéâ Beneficios de usar LocalStack # Para desarrolladores # ‚ö° Desarrollo m√°s r√°pido - Sin latencia de red üí∞ Sin costos - Prueba sin l√≠mites üîí Datos seguros - Todo permanece local üß™ Testing f√°cil - Entorno controlado Para equipos # üîÑ CI/CD mejorado - Tests automatizados üìà Productividad - Menos tiempo de setup üéØ Consistencia - Mismo entorno para todos üöÄ Despliegues seguros - Validaci√≥n previa üîó Recursos adicionales # Documentaci√≥n oficial de LocalStack Repositorio en GitHub Comunidad en Slack Ejemplos en GitHub ¬°Comienza tu journey con LocalStack y lleva tu desarrollo con AWS al siguiente nivel!\n"},{"id":2,"href":"/posts/localstack-guia-completa/","title":"LocalStack: Gu√≠a completa para desarrollo local con AWS","section":"Posts","content":"LocalStack es una herramienta esencial para cualquier desarrollador que trabaje con servicios de AWS. Te permite ejecutar servicios AWS localmente, ahorrando costos y acelerando el desarrollo.\nüéØ ¬øQu√© es LocalStack? # LocalStack es un proyecto OpenSource que simula los servicios de AWS en tu m√°quina local. Es perfecto para:\nDesarrollo local sin costos de AWS Testing de infraestructura como c√≥digo Prototipado r√°pido de arquitecturas CI/CD con pruebas automatizadas üìö Serie de posts sobre LocalStack # He creado una serie completa de posts para que domines LocalStack desde cero:\n1. C√≥mo instalar LocalStack # Instalaci√≥n con pip y Docker Configuraci√≥n con Docker Compose Verificaci√≥n de la instalaci√≥n Enlaces a documentaci√≥n oficial 2. Configurar perfil AWS para LocalStack # Configuraci√≥n de perfiles AWS Alternancia entre entornos local y AWS Scripts y alias √∫tiles Mejores pr√°cticas de seguridad 3. Usar Terraform con LocalStack # Configuraci√≥n del provider AWS Ejemplos pr√°cticos con S3 y DynamoDB Backend remoto con LocalStack Verificaci√≥n de recursos creados 4. Usar CloudFormation con LocalStack # Templates b√°sicos y avanzados Gesti√≥n de stacks localmente Comandos √∫tiles de CloudFormation Validaci√≥n de templates 5. Ejemplos pr√°cticos con LocalStack # Configuraciones con Docker Scripts de automatizaci√≥n Testing con pytest Integraci√≥n con CI/CD üöÄ Servicios AWS soportados # LocalStack soporta una amplia gama de servicios AWS:\nServicios b√°sicos (Community Edition) # S3 - Simple Storage Service DynamoDB - Base de datos NoSQL Lambda - Funciones serverless API Gateway - APIs REST y WebSocket CloudFormation - Infrastructure as Code IAM - Identity and Access Management SQS - Simple Queue Service SNS - Simple Notification Service Servicios avanzados (Pro Edition) # ECS/EKS - Container services RDS - Relational Database Service ElastiCache - In-memory caching Kinesis - Real-time data streaming CloudWatch - Monitoring y logging üõ†Ô∏è Casos de uso comunes # Desarrollo de aplicaciones serverless # # Crear funci√≥n Lambda aws lambda create-function \\ --endpoint-url http://localhost:4566 \\ --function-name my-function \\ --runtime python3.9 \\ --role arn:aws:iam::123456789012:role/lambda-role \\ --handler index.handler \\ --zip-file fileb://function.zip Testing de infraestructura # # Ejecutar tests con pytest pytest tests/ --localstack-endpoint=http://localhost:4566 Prototipado de arquitecturas # # docker-compose.yml para stack completo version: \u0026#39;3.8\u0026#39; services: localstack: image: localstack/localstack ports: - \u0026#34;4566:4566\u0026#34; environment: - SERVICES=s3,dynamodb,lambda,apigateway üìä Comparaci√≥n: LocalStack vs AWS Real # Aspecto LocalStack AWS Real Costo Gratuito Pago por uso Velocidad Muy r√°pida Depende de la regi√≥n Disponibilidad Offline Requiere internet Servicios Subconjunto Todos los servicios Datos Temporales Persistentes Escalabilidad Limitada Ilimitada üéâ Beneficios de usar LocalStack # Para desarrolladores # ‚ö° Desarrollo m√°s r√°pido - Sin latencia de red üí∞ Sin costos - Prueba sin l√≠mites üîí Datos seguros - Todo permanece local üß™ Testing f√°cil - Entorno controlado Para equipos # üîÑ CI/CD mejorado - Tests automatizados üìà Productividad - Menos tiempo de setup üéØ Consistencia - Mismo entorno para todos üöÄ Despliegues seguros - Validaci√≥n previa üîó Recursos adicionales # Documentaci√≥n oficial de LocalStack Repositorio en GitHub Comunidad en Slack Ejemplos en GitHub üéØ Pr√≥ximos pasos # Instala LocalStack siguiendo la gu√≠a de instalaci√≥n Configura tu perfil con la gu√≠a de configuraci√≥n Prueba con Terraform usando los ejemplos pr√°cticos Explora CloudFormation con los templates de ejemplo Automatiza tu workflow con los scripts y ejemplos ¬°Comienza tu journey con LocalStack y lleva tu desarrollo con AWS al siguiente nivel!\n"},{"id":3,"href":"/posts/localstack-ejemplos/","title":"Ejemplos pr√°cticos con LocalStack","section":"Posts","content":"En este post te muestro diferentes formas de usar LocalStack con ejemplos pr√°cticos y configuraciones √∫tiles para diferentes escenarios de desarrollo.\nüîß Configurar AWS CLI para LocalStack # Crear un alias para AWS CLI local # La forma m√°s simple de usar AWS CLI con LocalStack:\nalias aws=\u0026#34;aws --endpoint-url http://localhost:4566\u0026#34; Ahora puedes usar comandos AWS normalmente:\naws s3 ls aws dynamodb list-tables aws lambda list-functions Usar variables de entorno # export AWS_ENDPOINT_URL=http://localhost:4566 export AWS_ACCESS_KEY_ID=test export AWS_SECRET_ACCESS_KEY=test export AWS_DEFAULT_REGION=us-east-1 üê≥ Ejemplos con Docker # 1. Imagen Docker personalizada # Si tienes una imagen personalizada con herramientas preinstaladas:\ndocker run --rm -ti \\ --network host \\ -v ~/.ssh:/root/.ssh:ro \\ -v $(pwd):/app \\ -w /app \\ yosoyfunes/cbff-local:v1.0.0 2. Sandbox completo (sin mapear nada) # Para un entorno completamente aislado:\ndocker run --rm -ti \\ --network host \\ -w /app \\ yosoyfunes/cbff-local:v1.0.0 3. Compartir Docker con network local # Para proyectos que requieren acceso a m√≥dulos locales:\ndocker run --rm -ti -w /data \\ --network host \\ -v ~/.ssh:/root/.ssh:ro \\ -v /Users/matias/Projects/terraform_modules:/terraform_modules \\ -v $(pwd):/app -w /app \\ yosoyfunes/cbff-local:v1.0.0 üìù Scripts √∫tiles para automatizaci√≥n # Script de inicializaci√≥n # Crea un archivo init-localstack.sh:\n#!/bin/bash echo \u0026#34;üöÄ Iniciando LocalStack...\u0026#34; # Verificar si LocalStack est√° corriendo if ! curl -s http://localhost:4566/health \u0026gt; /dev/null; then echo \u0026#34;‚ùå LocalStack no est√° corriendo. Iniciando...\u0026#34; localstack start -d # Esperar a que LocalStack est√© listo echo \u0026#34;‚è≥ Esperando a que LocalStack est√© listo...\u0026#34; while ! curl -s http://localhost:4566/health \u0026gt; /dev/null; do sleep 2 done fi echo \u0026#34;‚úÖ LocalStack est√° listo!\u0026#34; # Configurar alias alias aws=\u0026#34;aws --endpoint-url http://localhost:4566\u0026#34; # Crear recursos iniciales echo \u0026#34;üì¶ Creando recursos iniciales...\u0026#34; # Crear bucket S3 aws s3 mb s3://my-dev-bucket # Crear tabla DynamoDB aws dynamodb create-table \\ --table-name users \\ --attribute-definitions AttributeName=id,AttributeType=S \\ --key-schema AttributeName=id,KeyType=HASH \\ --billing-mode PAY_PER_REQUEST echo \u0026#34;üéâ Configuraci√≥n completada!\u0026#34; Script de limpieza # Crea un archivo cleanup-localstack.sh:\n#!/bin/bash echo \u0026#34;üßπ Limpiando recursos de LocalStack...\u0026#34; # Configurar alias alias aws=\u0026#34;aws --endpoint-url http://localhost:4566\u0026#34; # Eliminar buckets S3 echo \u0026#34;üóëÔ∏è Eliminando buckets S3...\u0026#34; for bucket in $(aws s3 ls | awk \u0026#39;{print $3}\u0026#39;); do aws s3 rb s3://$bucket --force done # Eliminar tablas DynamoDB echo \u0026#34;üóëÔ∏è Eliminando tablas DynamoDB...\u0026#34; for table in $(aws dynamodb list-tables --query \u0026#39;TableNames[]\u0026#39; --output text); do aws dynamodb delete-table --table-name $table done # Eliminar funciones Lambda echo \u0026#34;üóëÔ∏è Eliminando funciones Lambda...\u0026#34; for function in $(aws lambda list-functions --query \u0026#39;Functions[].FunctionName\u0026#39; --output text); do aws lambda delete-function --function-name $function done echo \u0026#34;‚úÖ Limpieza completada!\u0026#34; üîÑ Ejemplo de workflow completo # 1. Docker Compose para desarrollo # version: \u0026#39;3.8\u0026#39; services: localstack: image: localstack/localstack ports: - \u0026#34;4566:4566\u0026#34; environment: - SERVICES=s3,dynamodb,lambda,iam,cloudformation - DEBUG=1 - DATA_DIR=/tmp/localstack/data - DOCKER_HOST=unix:///var/run/docker.sock volumes: - \u0026#34;/tmp/localstack:/tmp/localstack\u0026#34; - \u0026#34;/var/run/docker.sock:/var/run/docker.sock\u0026#34; app: build: . depends_on: - localstack environment: - AWS_ENDPOINT_URL=http://localstack:4566 - AWS_ACCESS_KEY_ID=test - AWS_SECRET_ACCESS_KEY=test - AWS_DEFAULT_REGION=us-east-1 volumes: - .:/app working_dir: /app 2. Makefile para automatizaci√≥n # .PHONY: start stop test deploy clean start: @echo \u0026#34;üöÄ Iniciando LocalStack...\u0026#34; docker-compose up -d localstack @echo \u0026#34;‚è≥ Esperando a LocalStack...\u0026#34; @while ! curl -s http://localhost:4566/health \u0026gt; /dev/null; do sleep 2; done @echo \u0026#34;‚úÖ LocalStack listo!\u0026#34; stop: @echo \u0026#34;üõë Deteniendo LocalStack...\u0026#34; docker-compose down test: @echo \u0026#34;üß™ Ejecutando tests...\u0026#34; pytest tests/ -v deploy: @echo \u0026#34;üöÄ Desplegando infraestructura...\u0026#34; terraform init terraform plan -out=tfplan terraform apply tfplan clean: @echo \u0026#34;üßπ Limpiando recursos...\u0026#34; ./cleanup-localstack.sh setup: start @echo \u0026#34;üì¶ Configurando recursos iniciales...\u0026#34; ./init-localstack.sh üß™ Testing con LocalStack # Ejemplo de test con pytest # import boto3 import pytest from moto import mock_s3 @pytest.fixture def s3_client(): return boto3.client( \u0026#39;s3\u0026#39;, endpoint_url=\u0026#39;http://localhost:4566\u0026#39;, aws_access_key_id=\u0026#39;test\u0026#39;, aws_secret_access_key=\u0026#39;test\u0026#39;, region_name=\u0026#39;us-east-1\u0026#39; ) def test_create_bucket(s3_client): bucket_name = \u0026#39;test-bucket\u0026#39; # Crear bucket s3_client.create_bucket(Bucket=bucket_name) # Verificar que existe response = s3_client.list_buckets() bucket_names = [bucket[\u0026#39;Name\u0026#39;] for bucket in response[\u0026#39;Buckets\u0026#39;]] assert bucket_name in bucket_names def test_upload_file(s3_client): bucket_name = \u0026#39;test-bucket\u0026#39; key = \u0026#39;test-file.txt\u0026#39; content = \u0026#39;Hello LocalStack!\u0026#39; # Crear bucket s3_client.create_bucket(Bucket=bucket_name) # Subir archivo s3_client.put_object( Bucket=bucket_name, Key=key, Body=content ) # Verificar contenido response = s3_client.get_object(Bucket=bucket_name, Key=key) assert response[\u0026#39;Body\u0026#39;].read().decode() == content üéØ Consejos y mejores pr√°cticas # 1. Variables de entorno para configuraci√≥n # # .env file LOCALSTACK_ENDPOINT=http://localhost:4566 AWS_ACCESS_KEY_ID=test AWS_SECRET_ACCESS_KEY=test AWS_DEFAULT_REGION=us-east-1 DEBUG=1 2. Healthcheck personalizado # #!/bin/bash check_localstack() { local max_attempts=30 local attempt=1 while [ $attempt -le $max_attempts ]; do if curl -s http://localhost:4566/health | grep -q \u0026#34;running\u0026#34;; then echo \u0026#34;‚úÖ LocalStack est√° listo!\u0026#34; return 0 fi echo \u0026#34;‚è≥ Intento $attempt/$max_attempts - Esperando LocalStack...\u0026#34; sleep 2 ((attempt++)) done echo \u0026#34;‚ùå LocalStack no respondi√≥ despu√©s de $max_attempts intentos\u0026#34; return 1 } 3. Configuraci√≥n para CI/CD # # GitHub Actions example name: Test with LocalStack on: [push, pull_request] jobs: test: runs-on: ubuntu-latest services: localstack: image: localstack/localstack ports: - 4566:4566 env: SERVICES: s3,dynamodb,lambda DEBUG: 1 steps: - uses: actions/checkout@v2 - name: Wait for LocalStack run: | while ! curl -s http://localhost:4566/health; do sleep 2 done - name: Run tests run: | export AWS_ENDPOINT_URL=http://localhost:4566 pytest tests/ ¬°Con estos ejemplos puedes aprovechar al m√°ximo LocalStack en tus proyectos de desarrollo!\n"},{"id":4,"href":"/posts/localstack-cloudformation/","title":"Usar CloudFormation con LocalStack localmente","section":"Posts","content":"CloudFormation es el servicio nativo de AWS para Infrastructure as Code. Con LocalStack puedes probar tus templates de CloudFormation localmente antes de desplegarlos en AWS.\nüìù Ejemplo b√°sico: Crear un bucket S3 # Archivo s3.yaml # AWSTemplateFormatVersion: \u0026#34;2010-09-09\u0026#34; Description: \u0026#34;Template b√°sico para crear un bucket S3\u0026#34; Resources: MyS3Bucket: Type: AWS::S3::Bucket Properties: BucketName: !Sub \u0026#34;${AWS::StackName}-bucket\u0026#34; Tags: - Key: TestKey Value: \u0026#34;my bucket 1\u0026#34; - Key: Environment Value: \u0026#34;Development\u0026#34; - Key: CreatedBy Value: \u0026#34;LocalStack\u0026#34; Outputs: BucketName: Description: \u0026#34;Nombre del bucket S3 creado\u0026#34; Value: !Ref MyS3Bucket Export: Name: !Sub \u0026#34;${AWS::StackName}-BucketName\u0026#34; BucketArn: Description: \u0026#34;ARN del bucket S3\u0026#34; Value: !GetAtt MyS3Bucket.Arn Export: Name: !Sub \u0026#34;${AWS::StackName}-BucketArn\u0026#34; üöÄ Desplegar el stack # Crear el stack # aws cloudformation create-stack \\ --endpoint-url http://localhost:4566 \\ --stack-name samplestack \\ --template-body file://s3.yaml \\ --region us-east-1 Verificar el estado del stack # aws cloudformation describe-stacks \\ --endpoint-url http://localhost:4566 \\ --stack-name samplestack \\ --region us-east-1 Listar recursos del stack # aws cloudformation list-stack-resources \\ --endpoint-url http://localhost:4566 \\ --stack-name samplestack \\ --region us-east-1 üì¶ Ejemplo avanzado: Stack completo con m√∫ltiples recursos # Archivo complete-stack.yaml # AWSTemplateFormatVersion: \u0026#34;2010-09-09\u0026#34; Description: \u0026#34;Stack completo con S3, DynamoDB y Lambda\u0026#34; Parameters: Environment: Type: String Default: \u0026#34;dev\u0026#34; AllowedValues: [\u0026#34;dev\u0026#34;, \u0026#34;staging\u0026#34;, \u0026#34;prod\u0026#34;] Description: \u0026#34;Ambiente de despliegue\u0026#34; Resources: # Bucket S3 DataBucket: Type: AWS::S3::Bucket Properties: BucketName: !Sub \u0026#34;${Environment}-data-bucket-${AWS::AccountId}\u0026#34; VersioningConfiguration: Status: Enabled Tags: - Key: Environment Value: !Ref Environment # Tabla DynamoDB UserTable: Type: AWS::DynamoDB::Table Properties: TableName: !Sub \u0026#34;${Environment}-users\u0026#34; BillingMode: PAY_PER_REQUEST AttributeDefinitions: - AttributeName: userId AttributeType: S KeySchema: - AttributeName: userId KeyType: HASH Tags: - Key: Environment Value: !Ref Environment # Rol IAM para Lambda LambdaExecutionRole: Type: AWS::IAM::Role Properties: AssumeRolePolicyDocument: Version: \u0026#39;2012-10-17\u0026#39; Statement: - Effect: Allow Principal: Service: lambda.amazonaws.com Action: sts:AssumeRole ManagedPolicyArns: - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole Policies: - PolicyName: DynamoDBAccess PolicyDocument: Version: \u0026#39;2012-10-17\u0026#39; Statement: - Effect: Allow Action: - dynamodb:GetItem - dynamodb:PutItem - dynamodb:UpdateItem - dynamodb:DeleteItem Resource: !GetAtt UserTable.Arn # Funci√≥n Lambda ProcessorFunction: Type: AWS::Lambda::Function Properties: FunctionName: !Sub \u0026#34;${Environment}-processor\u0026#34; Runtime: python3.9 Handler: index.handler Role: !GetAtt LambdaExecutionRole.Arn Code: ZipFile: | import json import boto3 def handler(event, context): print(f\u0026#34;Received event: {json.dumps(event)}\u0026#34;) return { \u0026#39;statusCode\u0026#39;: 200, \u0026#39;body\u0026#39;: json.dumps(\u0026#39;Hello from LocalStack!\u0026#39;) } Environment: Variables: TABLE_NAME: !Ref UserTable BUCKET_NAME: !Ref DataBucket Outputs: BucketName: Description: \u0026#34;Nombre del bucket S3\u0026#34; Value: !Ref DataBucket Export: Name: !Sub \u0026#34;${AWS::StackName}-BucketName\u0026#34; TableName: Description: \u0026#34;Nombre de la tabla DynamoDB\u0026#34; Value: !Ref UserTable Export: Name: !Sub \u0026#34;${AWS::StackName}-TableName\u0026#34; LambdaFunctionArn: Description: \u0026#34;ARN de la funci√≥n Lambda\u0026#34; Value: !GetAtt ProcessorFunction.Arn Export: Name: !Sub \u0026#34;${AWS::StackName}-LambdaArn\u0026#34; Desplegar el stack completo # aws cloudformation create-stack \\ --endpoint-url http://localhost:4566 \\ --stack-name complete-stack \\ --template-body file://complete-stack.yaml \\ --parameters ParameterKey=Environment,ParameterValue=dev \\ --capabilities CAPABILITY_IAM \\ --region us-east-1 üîç Comandos √∫tiles para gesti√≥n de stacks # Actualizar un stack # aws cloudformation update-stack \\ --endpoint-url http://localhost:4566 \\ --stack-name samplestack \\ --template-body file://s3.yaml \\ --region us-east-1 Eliminar un stack # aws cloudformation delete-stack \\ --endpoint-url http://localhost:4566 \\ --stack-name samplestack \\ --region us-east-1 Obtener outputs del stack # aws cloudformation describe-stacks \\ --endpoint-url http://localhost:4566 \\ --stack-name samplestack \\ --query \u0026#39;Stacks[0].Outputs\u0026#39; \\ --region us-east-1 Validar template # aws cloudformation validate-template \\ --endpoint-url http://localhost:4566 \\ --template-body file://s3.yaml \\ --region us-east-1 ‚úÖ Verificar recursos creados # # Verificar bucket S3 aws s3 ls --endpoint-url http://localhost:4566 # Verificar tabla DynamoDB aws dynamodb list-tables --endpoint-url http://localhost:4566 # Verificar funci√≥n Lambda aws lambda list-functions --endpoint-url http://localhost:4566 üéØ Ventajas de usar CloudFormation con LocalStack # Validaci√≥n r√°pida: Prueba templates sin costos Debugging local: Logs y errores accesibles localmente Desarrollo iterativo: Cambios r√°pidos sin esperar deployments Testing automatizado: Integra en pipelines de CI/CD ¬°Ahora puedes desarrollar y probar tus templates de CloudFormation de forma local y eficiente!\n"},{"id":5,"href":"/posts/localstack-terraform/","title":"Usar Terraform con LocalStack para pruebas locales","section":"Posts","content":"Una de las grandes ventajas de LocalStack es poder probar nuestros scripts de Terraform localmente antes de desplegarlos en AWS. Esto nos permite ahorrar costos y acelerar el desarrollo.\nüéØ Configuraci√≥n del provider AWS para LocalStack # Para usar Terraform con LocalStack, necesitas configurar el provider AWS para que apunte a los endpoints locales:\nArchivo main.tf # provider \u0026#34;aws\u0026#34; { region = \u0026#34;us-east-1\u0026#34; access_key = \u0026#34;mock_access_key\u0026#34; secret_key = \u0026#34;mock_secret_key\u0026#34; s3_force_path_style = true skip_credentials_validation = true skip_metadata_api_check = true skip_requesting_account_id = true endpoints { s3 = \u0026#34;http://localhost:4566\u0026#34; dynamodb = \u0026#34;http://localhost:4566\u0026#34; lambda = \u0026#34;http://localhost:4566\u0026#34; iam = \u0026#34;http://localhost:4566\u0026#34; ec2 = \u0026#34;http://localhost:4566\u0026#34; # Agrega m√°s servicios seg√∫n necesites } } # Ejemplo: Crear un bucket S3 resource \u0026#34;aws_s3_bucket\u0026#34; \u0026#34;example\u0026#34; { bucket = \u0026#34;my-tf-test-bucket\u0026#34; tags = { Name = \u0026#34;My bucket\u0026#34; Environment = \u0026#34;Dev\u0026#34; } } # Ejemplo: Configurar versionado del bucket resource \u0026#34;aws_s3_bucket_versioning\u0026#34; \u0026#34;example\u0026#34; { bucket = aws_s3_bucket.example.id versioning_configuration { status = \u0026#34;Enabled\u0026#34; } } üöÄ Ejecutar Terraform # 1. Inicializar Terraform # terraform init 2. Planificar los cambios # terraform plan -out=tfplan 3. Aplicar los cambios # terraform apply \u0026#34;tfplan\u0026#34; üì¶ Ejemplo avanzado: Backend con S3 y DynamoDB # Archivo provider.tf # provider \u0026#34;aws\u0026#34; { region = \u0026#34;us-east-1\u0026#34; # Configuraci√≥n para LocalStack access_key = \u0026#34;test\u0026#34; secret_key = \u0026#34;test\u0026#34; s3_force_path_style = true skip_credentials_validation = true skip_metadata_api_check = true skip_requesting_account_id = true endpoints { s3 = \u0026#34;http://s3.localhost.localstack.cloud:4566\u0026#34; dynamodb = \u0026#34;http://localhost:4566\u0026#34; kms = \u0026#34;http://localhost:4566\u0026#34; } } Archivo backend.tf # module \u0026#34;backend\u0026#34; { source = \u0026#34;/terraform_modules/s3_dynamo_backend\u0026#34; ## Variables requeridas bucket_name = \u0026#34;my_terraform_state_bucket_name\u0026#34; dynamodb_name = \u0026#34;my_dynamodb_lock_state_table_name\u0026#34; ## Variables opcionales ## Encriptaci√≥n KMS o AES, por defecto es AES use_kms_encryption = true ## block_all_public_access - Por defecto est√° en false block_all_public_access = true } üîß Configuraci√≥n de backend remoto # Una vez creado el backend, puedes configurar Terraform para usarlo:\nterraform { backend \u0026#34;s3\u0026#34; { bucket = \u0026#34;my_terraform_state_bucket_name\u0026#34; key = \u0026#34;terraform.tfstate\u0026#34; region = \u0026#34;us-east-1\u0026#34; dynamodb_table = \u0026#34;my_dynamodb_lock_state_table_name\u0026#34; encrypt = true # Configuraci√≥n para LocalStack endpoint = \u0026#34;http://localhost:4566\u0026#34; force_path_style = true skip_credentials_validation = true skip_metadata_api_check = true skip_requesting_account_id = true } } ‚úÖ Verificar recursos creados # Puedes verificar que los recursos se crearon correctamente usando AWS CLI:\n# Listar buckets S3 aws --endpoint-url=http://localhost:4566 s3 ls # Listar tablas DynamoDB aws --endpoint-url=http://localhost:4566 dynamodb list-tables # Describir un bucket espec√≠fico aws --endpoint-url=http://localhost:4566 s3api head-bucket --bucket my-tf-test-bucket üéâ Ventajas de usar Terraform con LocalStack # Desarrollo r√°pido: Prueba cambios sin esperar deployments en AWS Sin costos: No pagas por recursos de prueba Debugging f√°cil: Logs locales y acceso directo a los servicios CI/CD: Integra pruebas automatizadas en tu pipeline ¬°Ahora puedes desarrollar y probar tu infraestructura como c√≥digo de forma local y eficiente!\n"},{"id":6,"href":"/posts/localstack-instalacion/","title":"C√≥mo instalar LocalStack","section":"Posts","content":"LocalStack es un proyecto OpenSource que nos permite tener localmente los mismos servicios que podemos utilizar en la nube de AWS. Es perfecto para desarrollo y testing sin incurrir en costos de AWS.\nüìã Requisitos previos # Docker instalado en tu sistema Python 3.7+ (para instalaci√≥n local) AWS CLI configurado üöÄ M√©todos de instalaci√≥n # M√©todo 1: Instalaci√≥n local con pip # pip install localstack M√©todo 2: Usando Docker Compose (Recomendado) # Crea un archivo docker-compose.yaml:\nversion: \u0026#34;3.8\u0026#34; services: localstack: container_name: \u0026#34;${LOCALSTACK_DOCKER_NAME-localstack_main}\u0026#34; image: localstack/localstack network_mode: bridge ports: - \u0026#34;127.0.0.1:53:53\u0026#34; # only required for Pro (DNS) - \u0026#34;127.0.0.1:53:53/udp\u0026#34; # only required for Pro (DNS) - \u0026#34;127.0.0.1:443:443\u0026#34; # only required for Pro (LocalStack HTTPS Edge Proxy) - \u0026#34;127.0.0.1:4510-4559:4510-4559\u0026#34; # external service port range - \u0026#34;127.0.0.1:4566:4566\u0026#34; # LocalStack Edge Proxy environment: - DEBUG=${DEBUG-} - DATA_DIR=${DATA_DIR-} - LAMBDA_EXECUTOR=${LAMBDA_EXECUTOR-} - HOST_TMP_FOLDER=${TMPDIR:-/tmp/}localstack - DOCKER_HOST=unix:///var/run/docker.sock volumes: - \u0026#34;${TMPDIR:-/tmp}/localstack:/tmp/localstack\u0026#34; - \u0026#34;/var/run/docker.sock:/var/run/docker.sock\u0026#34; ‚ñ∂Ô∏è Iniciar LocalStack # Por consola (instalaci√≥n local) # localstack start -d Con Docker Compose # docker-compose up -d Con Docker run # docker run --rm -it -p 4566:4566 -p 4510-4559:4510-4559 localstack/localstack ‚úÖ Verificar la instalaci√≥n # Una vez que LocalStack est√© ejecut√°ndose, puedes verificar que funciona correctamente:\n# Verificar el estado de LocalStack curl http://localhost:4566/health # Listar servicios disponibles aws --endpoint-url=http://localhost:4566 s3 ls üîó Enlaces √∫tiles # Documentaci√≥n oficial de LocalStack Repositorio en GitHub ¬°Ahora tienes LocalStack funcionando localmente y puedes empezar a desarrollar con servicios AWS sin costo!\n"},{"id":7,"href":"/about/","title":"Acerca de","section":"Blog de Matias - DevOps \u0026 Cloud","content":"¬°Hola! Soy Matias y este es mi blog personal usando Hugo y PaperMod.\n"},{"id":8,"href":"/posts/como-instalar-docker/","title":"C√≥mo instalar Docker","section":"Posts","content":"En este post te explico c√≥mo instalar Docker en tu sistema.\n1. Instalar Docker en Linux # sudo apt update sudo apt install docker.io sudo systemctl start docker sudo systemctl enable docker 2. Instalar Docker en macOS # Descarga e instala Docker Desktop desde:\nhttps://www.docker.com/products/docker-desktop/\n3. Instalar Docker en Windows # Descarga e instala Docker Desktop desde:\nhttps://www.docker.com/products/docker-desktop/\n4. Verificar la instalaci√≥n # Ejecuta en la terminal:\ndocker --version ¬°Listo! Ahora tienes Docker instalado en tu sistema.\n"},{"id":9,"href":"/posts/localstack-profile/","title":"Configurar perfil AWS para LocalStack","section":"Posts","content":"Configurar un perfil personalizado de AWS para LocalStack te permite alternar f√°cilmente entre tu entorno local y AWS real sin cambiar configuraciones constantemente.\nüîß Configuraci√≥n del perfil LocalStack # 1. Configurar el archivo de configuraci√≥n # Agrega el siguiente perfil a tu archivo de configuraci√≥n de AWS (~/.aws/config):\n[profile localstack] region=us-east-1 output=json endpoint_url = http://localhost:4566 2. Configurar las credenciales # Agrega el siguiente perfil a tu archivo de credenciales de AWS (~/.aws/credentials):\n[localstack] aws_access_key_id=test aws_secret_access_key=test üöÄ Usar el perfil LocalStack # Comando espec√≠fico con perfil # aws s3 ls --profile localstack aws dynamodb list-tables --profile localstack aws lambda list-functions --profile localstack Establecer como perfil por defecto # export AWS_DEFAULT_PROFILE=localstack Ahora todos los comandos AWS usar√°n LocalStack autom√°ticamente:\naws s3 ls aws dynamodb list-tables Volver al perfil por defecto # unset AWS_DEFAULT_PROFILE # o export AWS_DEFAULT_PROFILE=default üîÑ Alternar entre perfiles # Script para cambiar perfiles # Crea un script switch-profile.sh:\n#!/bin/bash case $1 in \u0026#34;local\u0026#34;) export AWS_DEFAULT_PROFILE=localstack echo \u0026#34;‚úÖ Cambiado a perfil LocalStack\u0026#34; ;; \u0026#34;aws\u0026#34;) export AWS_DEFAULT_PROFILE=default echo \u0026#34;‚úÖ Cambiado a perfil AWS\u0026#34; ;; *) echo \u0026#34;Uso: $0 {local|aws}\u0026#34; echo \u0026#34;Perfil actual: ${AWS_DEFAULT_PROFILE:-default}\u0026#34; ;; esac Alias √∫tiles # Agrega estos alias a tu .bashrc o .zshrc:\n# Alias para LocalStack alias awslocal=\u0026#34;aws --profile localstack\u0026#34; alias s3local=\u0026#34;aws s3 --profile localstack\u0026#34; alias dynamolocal=\u0026#34;aws dynamodb --profile localstack\u0026#34; # Cambiar perfiles r√°pidamente alias use-local=\u0026#34;export AWS_DEFAULT_PROFILE=localstack\u0026#34; alias use-aws=\u0026#34;export AWS_DEFAULT_PROFILE=default\u0026#34; ‚úÖ Verificar la configuraci√≥n # Comprobar perfiles disponibles # aws configure list-profiles Verificar configuraci√≥n actual # aws configure list --profile localstack Probar conectividad # # Verificar LocalStack aws s3 ls --profile localstack # Verificar AWS real aws s3 ls --profile default üéØ Ventajas del uso de perfiles # Seguridad: Evita usar credenciales reales en desarrollo Flexibilidad: Cambia f√°cilmente entre entornos Consistencia: Mismos comandos para local y AWS Automatizaci√≥n: Integra en scripts y CI/CD ¬°Ahora puedes trabajar eficientemente con LocalStack y AWS usando perfiles!\n"},{"id":10,"href":"/docs/","title":"Documentaci√≥n","section":"Blog de Matias - DevOps \u0026 Cloud","content":" üöÄ Bienvenido a mi Blog DevOps \u0026amp; Cloud # Este es mi espacio personal donde comparto conocimientos sobre DevOps, Cloud Computing y tecnolog√≠as modernas.\nüìö Contenido Disponible # LocalStack - Desarrollo Local con AWS # Una serie completa sobre c√≥mo usar LocalStack para desarrollo y testing local con servicios AWS.\nGu√≠a Completa de LocalStack - Introducci√≥n y overview Instalaci√≥n - C√≥mo instalar y configurar LocalStack Configuraci√≥n de Perfiles - Configurar perfiles AWS para LocalStack Terraform con LocalStack - Usar Terraform localmente CloudFormation con LocalStack - Templates de CloudFormation Ejemplos Pr√°cticos - Scripts y casos de uso reales üéØ Sobre este blog # Aqu√≠ encontrar√°s:\n‚úÖ Tutoriales paso a paso ‚úÖ Ejemplos pr√°cticos y ejecutables ‚úÖ Mejores pr√°cticas de DevOps ‚úÖ Casos de uso reales ‚úÖ Scripts y automatizaciones ¬°Espero que encuentres √∫til el contenido! Si tienes preguntas o sugerencias, no dudes en contactarme.\n"}]